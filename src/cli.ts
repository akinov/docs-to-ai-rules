#!/usr/bin/env node

import { Command } from 'commander';
import path from 'path';
import { convertDocs } from './index';
import { ConfigManager } from './configManager';
import { AppError, ConfigurationError, FileSystemError } from './errors'; // Import custom errors
import { readFileSync } from 'fs';

async function main() {
  const program = new Command();

  // Load version info from package.json
  let packageJsonVersion = 'unknown';
  try {
      const packageJsonPath = path.join(__dirname, '../../package.json');
      const packageJsonContent = readFileSync(packageJsonPath, 'utf8');
      packageJsonVersion = JSON.parse(packageJsonContent).version;
  } catch (error) {
      console.warn("Warning: Could not read package.json for version info.");
  }

  program
    .name('docs-to-ai-rules')
    .description('Generate rule files for AI agents from Markdown documents')
    .version(packageJsonVersion);

  // Add options definitions here again so they appear in --help
  // The actual parsing and validation is handled by ConfigManager
  program
    .option('-s, --source <directory>', 'Source directory', './docs/rules')
    .option('--services <services>', 'Target services (comma-separated)', 'cursor')
    .option('-x, --exclude <files>', 'Files to exclude (comma-separated)', 'README.md')
    .option('-d, --dry-run', 'Check for updates without modifying files')
    .option('--sync', 'Format output directory and sync files completely');

  // Parse to make --help work, but ConfigManager will parse again internally.
  // This is slightly redundant but keeps the --help functionality standard.
  program.parse(process.argv);

  try {
    // Instantiate ConfigManager to load and validate config
    // ConfigManager constructor now parses args and validates, throwing on error
    const configManager = new ConfigManager();
    const config = configManager.getConfig();

    // Execute conversion
    // convertDocs might throw FileSystemError or other AppErrors
    convertDocs(config);

    // If successful, exit code 0 (default)
    console.log("Operation completed successfully."); // Add a success message

  } catch (error: any) {
    // Centralized error handling
    console.error("\nError:"); // Add a newline for separation

    if (error instanceof ConfigurationError) {
      console.error(` Configuration Error: ${error.message}`);
      // Provide usage help for configuration errors
      program.outputHelp(); // Show help generated by Commander
      process.exitCode = 1; // Use process.exitCode for cleaner exit
    } else if (error instanceof FileSystemError) {
      console.error(` File System Error: ${error.message}`);
      if (error.path) {
          console.error(`   Path: ${error.path}`);
      }
      // Additional context might be helpful depending on the error subclass
      process.exitCode = 2;
    } else if (error instanceof AppError) {
      // Catch other known application errors
      console.error(` Application Error: ${error.message}`);
      process.exitCode = 3;
    } else {
      // Catch unexpected errors
      console.error(" An unexpected error occurred:");
      console.error(error); // Log the full error for debugging
      process.exitCode = 10; // Use a distinct code for unexpected errors
    }
    console.error("\nOperation failed.");
  }
}

// Run the main async function
main(); 
